// 4. Median of Two Sorted Arrays
// func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
//     comb := append(nums1,nums2...)
//     sort.Ints(comb)
//     length := len(comb)
//     var result float64 = 0
//     if length == 0 {
//         return result
//     }
//     if length % 2 == 0 {
//         result = (float64)(comb[length/2] + comb[length/2 - 1]) / 2
//     } else {
//         result = (float64)(comb[length/2])
//     }
//     return result
// }

import "math"

func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {
	if nums1 == nil || nums2 == nil {
		return 0.0
	}

	len1 := len(nums1)
	len2 := len(nums2)
	left := (len1 + len2 + 1) / 2  //left half of the combined median
	right := (len1 + len2 + 2) / 2 //right half of the combined median
	k1 := float64(getKth(nums1, 0, nums2, 0, left))
	k2 := float64(getKth(nums1, 0, nums2, 0, right))
	return (k1 + k2) / 2.0
}

func getKth(nums1 []int, start1 int, nums2 []int, start2 int, k int) int {
	// If nums1 is exhausted, return kth number in nums2
	if start1 > len(nums1)-1 {
		return nums2[start2+k-1]
	}
	// If nums2 is exhausted, return kth number in nums1
	if start2 > len(nums2)-1 {
		return nums1[start1+k-1]
	}
	if k == 1 {
		return Min(nums1[start1], nums2[start2])
	}
	mid1, mid2 := math.MaxInt64, math.MaxInt64
	if start1+k/2-1 < len(nums1) {
		mid1 = nums1[start1+k/2-1]
	}
	if start2+k/2-1 < len(nums2) {
		mid2 = nums2[start2+k/2-1]
	}
	if mid1 < mid2 {
		return getKth(nums1, start1+k/2, nums2, start2, k-k/2) //nums1.right + nums2
	} else {
		return getKth(nums1, start1, nums2, start2+k/2, k-k/2) //nums1 + nums2.right
	}
}

func Min(x int, y int) int {
	if x < y {
		return x
	} else {
		return y
	}
}