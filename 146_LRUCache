type LRUCache struct {
	head     *node // use LinkedList to demonstrate LRU (least recently used node at tail)
	tail     *node
	store    map[int]*node // to store and acquire the nodes in cache
	capacity int
}

// bidirectional node structrue which ha
type node struct {
	pre  *node
	next *node
	key  int
	val  int
}

func Constructor(capacity int) LRUCache {
	return LRUCache{store: make(map[int]*node), c: capacity}
}

// remove a node in linkedlist (node at head, middle or tail)
func (this *LRUCache) remove(n *node) {
	// node at head, remove head to head.next
	if n == this.head {
		this.head = n.next
	}
	// node at tail, node before tail become tail
	if n == this.tail {
		this.tail = this.tail.pre
	}
	// change the next node of n.pre, and pre node of n.next
	if n.pre != nil {
		n.pre.next = n.next
	}
	if n.next != nil {
		n.next.pre = n.pre
	}
}

func (this *LRUCache) add(n *node) {
	// add node to tail
	// if this.head == nil {
	//     this.head = n
	// }
	// if this.tail == nil {
	//     this.tail = n
	// }
	// this.tail.next = n
	// n.pre = this.tail
	// this.tail = n

	// add node to head everytime
	n.pre = nil
	n.next = this.head
	if n.next != nil {
		n.next.pre = n
	}
	this.head = n
	if this.tail == nil {
		this.tail = n
	}
}

func (this *LRUCache) Get(key int) int {
	if n, ok := this.store[key]; ok {
		this.remove(n)
		this.add(n)
		return n.v
	}
	return -1
}

func (this *LRUCache) Put(key int, value int) {
	newNode := &node{k: key, v: value}
	if n, ok := this.store[key]; ok {
		// change the value for key
		this.remove(n)
		this.add(newNode)
		this.store[key] = newNode
		return
	}
	if len(this.store) >= this.c {
		delete(this.store, this.tail.k)
		this.remove(this.tail)
	}
	this.add(newNode)
	this.store[key] = newNode
}